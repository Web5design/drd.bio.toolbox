#!/bin/env ruby
#
# Generates data to plot a graph (identity plot) 
# with the amount of variation in a set of windows
#
require File.expand_path(File.dirname(__FILE__)) + "/common"
include Common
include Help

# Set up help text.
#
usage_text = Help.set_usage_text <<END
Usage: cat pile_up_file | #{File.basename(__FILE__)} <stats_ref_genome> <window_size>

stats_ref_genome : text file (column1: contig name column2: size)
pileup_file      : pileup from samtools
window_size      : window size to use when looking for variation

Output format (stdout):
contig_name window_number #subs #inss #dels
END

# Check arguments
#
Help.error "Invalid number of arguments." if ARGV.size != 2 
stats_name = ARGV[0]
w_size     = ARGV[1]
Help.error "stats file not found." unless File.exists?(stats_name)
Help.error "windows size parameter is incorrect." unless w_size =~ /^\d+$/
Help.error "No data in stdin." unless data_in_stdin?
w_size     = w_size.to_i

def prepare_contig(cs, ws)
  n_windows = cs / ws > 0 ? cs / ws : 1
  { :subs => Array.new(n_windows, 0), 
    :inss => Array.new(n_windows, 0), 
    :dels => Array.new(n_windows, 0) }
end

# Find contig sizes 
#
c_sizes = {}
File.open(stats_name).each_line do |l| 
  c_name, size = l.split
  c_sizes[c_name] = size.to_i
end

# Add the variation found on each windows based on pileup
#
w = {} # Store the amount of variation per window
STDIN.each_line do |l|
  contig, pos, ref, var = l.split[0,4]
  v_type = case var
    when /\+/ 
      :inss
    when /-/ 
      :dels
    else 
      :subs
  end
  w[contig] = prepare_contig c_sizes[contig], w_size unless w[contig]
  window_number = (pos.to_i / w_size.to_i) - 1
  w[contig][v_type][window_number] += 1
  $stderr.printf "\rLooping over pileup: #{contig} #{pos}" if window_number % 10000 == 0
end
$stderr.puts ""

# Dump the results
#
$stderr.puts "Dumping results to stdout"
printf "global_window contig local_window subs inss dels\n"
gw = 0 # global_window
w.each do |c_name, v|
  lw = 0 # local_window
  gw += lw
  while lw < v[:subs].size
    printf "%d %s %d %d %d %d\n", gw, c_name, lw, v[:subs][lw], v[:inss][lw], v[:dels][lw]
    lw+=1
    gw+=1
  end
end
