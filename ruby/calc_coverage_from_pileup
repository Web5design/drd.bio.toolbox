#!/bin/env ruby
#
# Finds coverage using samtools pileup input.
#
require File.expand_path(File.dirname(__FILE__)) + "/common"
#require "profile"

include Help
include Common
include Statistics
usage=<<-EOF
Usage: #{File.basename(__FILE__)} <file_genome_stats> <genome_size>

Example: 

  $ samtools pileup my.sorted.merged.bam | \
  awk '{print $1" "$2" "$4}' | \
  calc_coverage_stats ../local/assembly_stats.txt 2936035333
  # 2936035333: size of Gibbon assembly

Notice the tools expects the bam to be sorted by coordinate.

For testing: 
  $ ruby -s `which #{$0}` -test
EOF
Help.set_usage_text usage

def log(msg, same_line=0, c_return=1)
  cr = c_return  == 1 ? "\n" : ""
  sl = same_line == 1 ? "\r" : ""
  $stderr.printf "#{sl}%s#{cr}", msg
end

def gather_genome_stats
  @genome = {}
  File.open(@g_file).each_line do |l|
    scaffold, size = l.split[0..1]
    @genome[scaffold] = size.to_i
  end
end

# Same as process_pileup, but does not stores anything
# in the array, it dumps directly.
def process_pu_and_dump
  cs     = "" # current scaffold
  gp     = 1  # global position
  offset = 0  # pileup uses positions relative to the scaffolds.
  @my_stdin.each_line do |l_stdin|
    s, p, c = l_stdin.split # scaffold name, position, coverage
    p = p.to_i
    if s != cs # We are in another contig/scaffold
      while @genome[cs] && gp < @genome[cs] # We may still have a region without coverage
        printf "%s %s\n", gp, 0; gp += 1
      end
      cs     = s
      offset = gp - 1
    end
    while gp < (p + offset) # While I don't have coverage, set to zero
      printf "%s %s\n", gp, 0; gp += 1
    end
    # There is coverage in that region, use it.
    printf "%s %s\n", gp, c
    gp += 1
    $stderr.printf "\rProcessing pileup: %2.2f%%", 
                   (gp*100).to_f/@g_size.to_f if gp % 100000 == 0
  end
  $stderr.puts ""
end

def process_pileup
  log "Processing pileup ..."
  cs     = "" # current scaffold
  gp     = 1  # global position
  offset = 0  # pileup uses positions relative to the scaffolds.
  @my_stdin.each_line do |l_stdin|
    s, p, c = l_stdin.split # scaffold name, position, coverage
    p = p.to_i
    if s != cs # We are in another contig/scaffold
      gp += 1 while @genome[cs] && gp < @genome[cs] # We may still have a region without coverage
      cs     = s
      offset = gp - 1
    end
    gp += 1 while gp < (p + offset) # While I don't have coverage, set to zero
    # There is coverage in that region, use it.
    @data[gp] = c.to_i
    gp += 1
    $stderr.printf "\r%s %d", cs, p if gp % 100000 == 0
  end
  $stderr.puts ""
end

def gather_stats
  log "Gathering stats ... "
  int_cov = {1  => 0, 4 => 0, 8 => 0, 10 => 0, 15 => 0, 20 => 0, 25 => 0, 30 => 0}
  (0..@g_size).each do |p|
    int_cov.each {|k, v| int_cov[k] += 1 if !@data[p].nil? && @data[p] >= k}
    $stderr.printf "\r%2.2f%%", (p*100).to_f/@g_size.to_f if p % 10000 == 0
  end
  log "\nDone."
  int_cov
end

def print_stats(int_cov)
  int_cov.each do |k,v| 
    $stderr.printf "%2.2f%% of genome covered at %dx +\n", (v*100).to_f/@g_size.to_f, k 
  end
end

def print_coverage_for_plotting
  (0..@g_size).each {|p| printf "%s %s\n", p, @data[p].nil? ? 0 : @data[p] }
end

# Main
# 
if ! $test
  Help.error "Invalid number of arguments." if ARGV.size != 2
  Help.error "No data in stdin." unless Common.data_in_stdin?
  @g_file = ARGV[0]
  Help.error "No genome stats file." unless File.exists?(@g_file)
  @g_size = ARGV[1].to_i
  @my_stdin = $stdin 
  @data = []
  gather_genome_stats
  #process_pileup
  process_pu_and_dump
  #print_stats gather_stats
  #print_coverage_for_plotting
else
  require 'test/unit'
  require 'tempfile'
  class TestScript < Test::Unit::TestCase
    def setup
      @t_stdin = Tempfile.new('stdin')
      @t_gfile = Tempfile.new('gfile')
      DATA.each_line do |l| 
        @t_stdin << l.gsub(/^A /, "") if l[0] == 'A'
        @t_gfile << l.gsub(/^B /, "") if l[0] == 'B'
      end
      @t_stdin.flush
      @t_gfile.flush
      @my_stdin = File.open(@t_stdin)
      @g_file   = File.open(@t_gfile)
    end

    def teardown
      @t_stdin.close
    end

    def xx_test_pileup
      @g_size = 21
      @data = {}
      gather_genome_stats
      process_pileup
      [2, 4, 5, 6].each {|i| assert_equal(i, @data[i]) }
      [10, 11, 14].each {|i| assert_equal(i, @data[i]) }
      [18, 20].each     {|i| assert_equal(i, @data[i]) }
      [0, 1, 3, 7, 8, 9, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25 ].each do |i| 
        assert_equal(nil, @data[i])
      end 
      print_stats gather_stats
      print_coverage_for_plotting
    end

    def test_pileup_and_dump
      gather_genome_stats
      process_pu_and_dump
    end

  end
end

# Data for testing A: stdin, B: genome stats
__END__
A s0 2 2
A s0 4 4
A s0 5 5
A s0 6 6
A s1 1 10
A s1 2 11
A s1 5 14
A s2 4 18
A s2 6 20
B s0 10 x x 25
B s1 5 x x 25
B s2 10 x x 25
